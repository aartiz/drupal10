diff --git a/core/misc/ajax.es6.js b/core/misc/ajax.es6.js
index 08923ae5..116a4aa6 100644
--- a/core/misc/ajax.es6.js
+++ b/core/misc/ajax.es6.js
@@ -101,9 +101,9 @@
     let responseText;
     if (xmlhttp.status) {
       statusCode = `\n${Drupal.t('An AJAX HTTP error occurred.')}\n${Drupal.t(
-        'HTTP Result Code: !status',
+        'HTTP Result Code: @status',
         {
-          '!status': xmlhttp.status,
+          '@status': xmlhttp.status,
         },
       )}`;
     } else {
@@ -112,15 +112,15 @@
       )}`;
     }
     statusCode += `\n${Drupal.t('Debugging information follows.')}`;
-    const pathText = `\n${Drupal.t('Path: !uri', { '!uri': uri })}`;
+    const pathText = `\n${Drupal.t('Path: @uri', { '@uri': uri })}`;
     statusText = '';
     // In some cases, when statusCode === 0, xmlhttp.statusText may not be
     // defined. Unfortunately, testing for it with typeof, etc, doesn't seem to
     // catch that and the test causes an exception. So we need to catch the
     // exception here.
     try {
-      statusText = `\n${Drupal.t('StatusText: !statusText', {
-        '!statusText': xmlhttp.statusText.trim(),
+      statusText = `\n${Drupal.t('StatusText: @statusText', {
+        '@statusText': xmlhttp.statusText.trim(),
       })}`;
     } catch (e) {
       // Empty.
@@ -130,8 +130,8 @@
     // Again, we don't have a way to know for sure whether accessing
     // xmlhttp.responseText is going to throw an exception. So we'll catch it.
     try {
-      responseText = `\n${Drupal.t('ResponseText: !responseText', {
-        '!responseText': xmlhttp.responseText.trim(),
+      responseText = `\n${Drupal.t('ResponseText: @responseText', {
+        '@responseText': xmlhttp.responseText.trim(),
       })}`;
     } catch (e) {
       // Empty.
@@ -144,14 +144,14 @@
     // We don't need readyState except for status == 0.
     const readyStateText =
       xmlhttp.status === 0
-        ? `\n${Drupal.t('ReadyState: !readyState', {
-            '!readyState': xmlhttp.readyState,
+        ? `\n${Drupal.t('ReadyState: @readyState', {
+            '@readyState': xmlhttp.readyState,
           })}`
         : '';
 
     customMessage = customMessage
-      ? `\n${Drupal.t('CustomMessage: !customMessage', {
-          '!customMessage': customMessage,
+      ? `\n${Drupal.t('CustomMessage: @customMessage', {
+          '@customMessage': customMessage,
         })}`
       : '';
 
@@ -575,8 +575,8 @@
         !Drupal.url.isLocal(ajax.url)
       ) {
         throw new Error(
-          Drupal.t('The callback URL is not local and not trusted: !url', {
-            '!url': ajax.url,
+          Drupal.t('The callback URL is not local and not trusted: @url', {
+            '@url': ajax.url,
           }),
         );
       }
diff --git a/core/misc/ajax.js b/core/misc/ajax.js
index b2f572c9..ed7cd415 100644
--- a/core/misc/ajax.js
+++ b/core/misc/ajax.js
@@ -58,40 +58,40 @@
     let responseText;
 
     if (xmlhttp.status) {
-      statusCode = `\n${Drupal.t('An AJAX HTTP error occurred.')}\n${Drupal.t('HTTP Result Code: !status', {
-        '!status': xmlhttp.status
+      statusCode = `\n${Drupal.t('An AJAX HTTP error occurred.')}\n${Drupal.t('HTTP Result Code: @status', {
+        '@status': xmlhttp.status
       })}`;
     } else {
       statusCode = `\n${Drupal.t('An AJAX HTTP request terminated abnormally.')}`;
     }
 
     statusCode += `\n${Drupal.t('Debugging information follows.')}`;
-    const pathText = `\n${Drupal.t('Path: !uri', {
-      '!uri': uri
+    const pathText = `\n${Drupal.t('Path: @uri', {
+      '@uri': uri
     })}`;
     statusText = '';
 
     try {
-      statusText = `\n${Drupal.t('StatusText: !statusText', {
-        '!statusText': xmlhttp.statusText.trim()
+      statusText = `\n${Drupal.t('StatusText: @statusText', {
+        '@statusText': xmlhttp.statusText.trim()
       })}`;
     } catch (e) {}
 
     responseText = '';
 
     try {
-      responseText = `\n${Drupal.t('ResponseText: !responseText', {
-        '!responseText': xmlhttp.responseText.trim()
+      responseText = `\n${Drupal.t('ResponseText: @responseText', {
+        '@responseText': xmlhttp.responseText.trim()
       })}`;
     } catch (e) {}
 
     responseText = responseText.replace(/<("[^"]*"|'[^']*'|[^'">])*>/gi, '');
     responseText = responseText.replace(/[\n]+\s+/g, '\n');
-    const readyStateText = xmlhttp.status === 0 ? `\n${Drupal.t('ReadyState: !readyState', {
-      '!readyState': xmlhttp.readyState
+    const readyStateText = xmlhttp.status === 0 ? `\n${Drupal.t('ReadyState: @readyState', {
+      '@readyState': xmlhttp.readyState
     })}` : '';
-    customMessage = customMessage ? `\n${Drupal.t('CustomMessage: !customMessage', {
-      '!customMessage': customMessage
+    customMessage = customMessage ? `\n${Drupal.t('CustomMessage: @customMessage', {
+      '@customMessage': customMessage
     })}` : '';
     this.message = statusCode + pathText + statusText + customMessage + responseText + readyStateText;
     this.name = 'AjaxError';
@@ -264,8 +264,8 @@
     ajax.options.url += `${Drupal.ajax.WRAPPER_FORMAT}=${wrapper}`;
     $(ajax.element).on(elementSettings.event, function (event) {
       if (!drupalSettings.ajaxTrustedUrl[ajax.url] && !Drupal.url.isLocal(ajax.url)) {
-        throw new Error(Drupal.t('The callback URL is not local and not trusted: !url', {
-          '!url': ajax.url
+        throw new Error(Drupal.t('The callback URL is not local and not trusted: @url', {
+          '@url': ajax.url
         }));
       }
 
diff --git a/core/modules/ckeditor/js/ckeditor.es6.js b/core/modules/ckeditor/js/ckeditor.es6.js
index fe0ebb94..79bfa89b 100644
--- a/core/modules/ckeditor/js/ckeditor.es6.js
+++ b/core/modules/ckeditor/js/ckeditor.es6.js
@@ -30,8 +30,8 @@
       // label so that screen readers say something that is understandable
       // for end users.
       const label = $(`label[for=${element.getAttribute('id')}]`).html();
-      format.editorSettings.title = Drupal.t('Rich Text Editor, !label field', {
-        '!label': label,
+      format.editorSettings.title = Drupal.t('Rich Text Editor, @label field', {
+        '@label': label,
       });
 
       return !!CKEDITOR.replace(element, format.editorSettings);
diff --git a/core/modules/ckeditor/js/ckeditor.js b/core/modules/ckeditor/js/ckeditor.js
index e9431d79..1b998079 100644
--- a/core/modules/ckeditor/js/ckeditor.js
+++ b/core/modules/ckeditor/js/ckeditor.js
@@ -14,8 +14,8 @@
         format: format.format
       };
       const label = $(`label[for=${element.getAttribute('id')}]`).html();
-      format.editorSettings.title = Drupal.t('Rich Text Editor, !label field', {
-        '!label': label
+      format.editorSettings.title = Drupal.t('Rich Text Editor, @label field', {
+        '@label': label
       });
       return !!CKEDITOR.replace(element, format.editorSettings);
     },
diff --git a/core/modules/locale/tests/locale_test.es6.js b/core/modules/locale/tests/locale_test.es6.js
index 1f266c62..8e262f3a 100644
--- a/core/modules/locale/tests/locale_test.es6.js
+++ b/core/modules/locale/tests/locale_test.es6.js
@@ -26,7 +26,7 @@ Drupal.t("Context Unquoted t", {}, {context: "Context string unquoted"});
 Drupal.t("Context Single Quoted t", {}, {'context': "Context string single quoted"});
 Drupal.t("Context Double Quoted t", {}, {"context": "Context string double quoted"});
 
-Drupal.t("Context !key Args t", {'!key': 'value'}, {context: "Context string"});
+Drupal.t("Context @key Args t", {'@key': 'value'}, {context: "Context string"});
 
 Drupal.formatPlural(1, "Standard Call plural", "Standard Call @count plural");
 Drupal
@@ -49,6 +49,6 @@ Drupal.formatPlural(1, "Context Unquoted plural", "Context Unquoted @count plura
 Drupal.formatPlural(1, "Context Single Quoted plural", "Context Single Quoted @count plural", {}, {'context': "Context string single quoted"});
 Drupal.formatPlural(1, "Context Double Quoted plural", "Context Double Quoted @count plural", {}, {"context": "Context string double quoted"});
 
-Drupal.formatPlural(1, "Context !key Args plural", "Context !key Args @count plural", {'!key': 'value'}, {context: "Context string"});
+Drupal.formatPlural(1, "Context @key Args plural", "Context @key Args @count plural", {'@key': 'value'}, {context: "Context string"});
 
 Drupal.formatPlural(1, "No count argument plural - singular", "No count argument plural - plural");
diff --git a/core/modules/locale/tests/locale_test.js b/core/modules/locale/tests/locale_test.js
index 8c5ca725..f590fddf 100644
--- a/core/modules/locale/tests/locale_test.js
+++ b/core/modules/locale/tests/locale_test.js
@@ -22,8 +22,8 @@ Drupal.t("Context Single Quoted t", {}, {
 Drupal.t("Context Double Quoted t", {}, {
   "context": "Context string double quoted"
 });
-Drupal.t("Context !key Args t", {
-  '!key': 'value'
+Drupal.t("Context @key Args t", {
+  '@key': 'value'
 }, {
   context: "Context string"
 });
@@ -42,8 +42,8 @@ Drupal.formatPlural(1, "Context Single Quoted plural", "Context Single Quoted @c
 Drupal.formatPlural(1, "Context Double Quoted plural", "Context Double Quoted @count plural", {}, {
   "context": "Context string double quoted"
 });
-Drupal.formatPlural(1, "Context !key Args plural", "Context !key Args @count plural", {
-  '!key': 'value'
+Drupal.formatPlural(1, "Context @key Args plural", "Context @key Args @count plural", {
+  '@key': 'value'
 }, {
   context: "Context string"
 });
diff --git a/core/modules/locale/tests/src/Functional/LocaleJavascriptTranslationTest.php b/core/modules/locale/tests/src/Functional/LocaleJavascriptTranslationTest.php
index 2b1cfd8d..b4ae1da1 100644
--- a/core/modules/locale/tests/src/Functional/LocaleJavascriptTranslationTest.php
+++ b/core/modules/locale/tests/src/Functional/LocaleJavascriptTranslationTest.php
@@ -71,7 +71,7 @@ public function testFileParsing() {
         "Double Quote \\\"Escaped\\\" t" => '',
         'Double Quote Concat strings t' => '',
 
-        'Context !key Args t' => 'Context string',
+        'Context @key Args t' => 'Context string',
 
         'Context Unquoted t' => 'Context string unquoted',
         'Context Single Quoted t' => 'Context string single quoted',
@@ -86,7 +86,7 @@ public function testFileParsing() {
         "Double Quote plural{$etx}Double Quote @count plural" => '',
         "Double Quote \\\"Escaped\\\" plural{$etx}Double Quote \\\"Escaped\\\" @count plural" => '',
 
-        "Context !key Args plural{$etx}Context !key Args @count plural" => 'Context string',
+        "Context @key Args plural{$etx}Context @key Args @count plural" => 'Context string',
 
         "Context Unquoted plural{$etx}Context Unquoted @count plural" => 'Context string unquoted',
         "Context Single Quoted plural{$etx}Context Single Quoted @count plural" => 'Context string single quoted',
diff --git a/core/modules/system/js/system.modules.es6.js b/core/modules/system/js/system.modules.es6.js
index f46b1226..d141b8d7 100644
--- a/core/modules/system/js/system.modules.es6.js
+++ b/core/modules/system/js/system.modules.es6.js
@@ -71,8 +71,8 @@
           $details.attr('open', true).each(hidePackageDetails);
 
           Drupal.announce(
-            Drupal.t('!modules modules are available in the modified list.', {
-              '!modules': $rowsAndDetails.find('tbody tr:visible').length,
+            Drupal.t('@modules modules are available in the modified list.', {
+              '@modules': $rowsAndDetails.find('tbody tr:visible').length,
             }),
           );
         } else if (searching) {
diff --git a/core/modules/system/js/system.modules.js b/core/modules/system/js/system.modules.js
index fb19695e..b01ad3a4 100644
--- a/core/modules/system/js/system.modules.js
+++ b/core/modules/system/js/system.modules.js
@@ -47,8 +47,8 @@
           $rows.each(showModuleRow);
           $details.not('[open]').attr('data-drupal-system-state', 'forced-open');
           $details.attr('open', true).each(hidePackageDetails);
-          Drupal.announce(Drupal.t('!modules modules are available in the modified list.', {
-            '!modules': $rowsAndDetails.find('tbody tr:visible').length
+          Drupal.announce(Drupal.t('@modules modules are available in the modified list.', {
+            '@modules': $rowsAndDetails.find('tbody tr:visible').length
           }));
         } else if (searching) {
           searching = false;
diff --git a/core/modules/tour/js/tour.es6.js b/core/modules/tour/js/tour.es6.js
index 96c66d98..42f34730 100644
--- a/core/modules/tour/js/tour.es6.js
+++ b/core/modules/tour/js/tour.es6.js
@@ -315,10 +315,10 @@
         if (tourItems.length !== filteredTour.length) {
           filteredTour.forEach((filteredTourItem, filteredTourItemId) => {
             filteredTour[filteredTourItemId].counter = Drupal.t(
-              '!tour_item of !total',
+              '@tour_item of @total',
               {
-                '!tour_item': filteredTourItemId + 1,
-                '!total': filteredTour.length,
+                '@tour_item': filteredTourItemId + 1,
+                '@total': filteredTour.length,
               },
             );
 
diff --git a/core/modules/tour/js/tour.js b/core/modules/tour/js/tour.js
index 5d76eae9..79cb2454 100644
--- a/core/modules/tour/js/tour.js
+++ b/core/modules/tour/js/tour.js
@@ -156,9 +156,9 @@
 
       if (tourItems.length !== filteredTour.length) {
         filteredTour.forEach((filteredTourItem, filteredTourItemId) => {
-          filteredTour[filteredTourItemId].counter = Drupal.t('!tour_item of !total', {
-            '!tour_item': filteredTourItemId + 1,
-            '!total': filteredTour.length
+          filteredTour[filteredTourItemId].counter = Drupal.t('@tour_item of @total', {
+            '@tour_item': filteredTourItemId + 1,
+            '@total': filteredTour.length
           });
 
           if (filteredTourItemId === filteredTour.length - 1) {
